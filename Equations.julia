using Printf
satt_i = readline()
satt_j = readline()
satt_k = readline()
satt_l = readline()

# we need to split the coordinates from the readlines
# so we can get each individual x, y, z value
i_unparsed = split(satt_i, " ")
i_coords = Vector{Float64}(undef, 3)
index = 1
for coord in i_unparsed
	coord = parse(Float64, coord)
	i_coords[index] = coord
	index = index + 1
end

j_coords = Vector{Float64}(undef, 3)
index = 1
j_unparsed = split(satt_j, " ")
for coord in j_coords
	coord = parse(Float64, coord)
	j_coords[index] = coord
	index = index + 1
end

k_coords = Vector{Float64}(undef, 3)
index = 1
k_unparsed = split(satt_j, " ")
for coord in j_coords
	coord = parse(Float64, coord)
	k_coords[index] = coord
	index = index + 1
end

l_coords = Vector{Float64}(undef, 3)
index = 1
l_unparsed = split(satt_j, " ")
for coord in j_coords
	coord = parse(Float64, coord)
	l_coords[index] = coord
	index = index + 1
end
	
# x four distances
x_ji = j_coords[1] - i_coords[1]
x_ki = k_coords[1] - i_coords[1]
x_jk = j_coords[1] - k_coords[1]
x_lk = l_coords[1] - k_coords[1]

println(x_ji)
# y four distances 
y_ki = k_coords[2] - i_coords[2]
y_ji = j_coords[2] - i_coords[2]
y_lk = l_coords[2] - k_coords[2]
y_jk = j_coords[2] - k_coords[2]


# z four distances
z_ji = j_coords[3] - i_coords[3]
z_ki = k_coords[3] - i_coords[3]
z_jk = j_coords[3] - k_coords[3]
z_lk = l_coords[3] - k_coords[3]

# Speed of light (m/ns) # use meters per nanosecond since times are provided in them
SPEED_OF_LIGHT = 299792458 * 10 ^ 9

# for now, im initiating an array of zeros where time would go in 
# the dimentions should be determined by how the input is given
# get following lines of times and assign them to an time array/list

for line in eachline(stdin) 
	# do equation stuff here
    #read line, split, assign each value
    times = line
    t_array = split(times, " ")
    T_i = parse(Float64, t_array[1])
    T_j = parse(Float64, t_array[2])
    T_k = parse(Float64, t_array[3])
    T_l = parse(Float64, t_array[4])

    #=
	The distance between sattelites can be calculated by multiplying the difference between
	signal arrival times by the speed of light. Assuming all sattelites sent their signals at the same time,
	the time difference can only be explained by one being closer or further.
	
	This is the R value in the equation set.
	=#
    dist_ij = (T_i - T_j) * SPEED_OF_LIGHT
    dist_ik = (T_i - T_k) * SPEED_OF_LIGHT
    dist_kj = (T_k - T_j) * SPEED_OF_LIGHT
    dist_kl = (T_k - T_l) * SPEED_OF_LIGHT

    # set of quantities - Equations 1 -> 6 on the paper
    x_ijy = (dist_ij * y_ki) - (dist_ik * y_ji)
    x_ikx = (dist_ik * x_ji) - (dist_ij * x_ki)
    x_ikz = (dist_ik * z_ji) - (dist_ij * z_ki)
    x_kjy = (dist_kj * y_lk) - (dist_kl * y_jk)
    x_klx = (dist_kl * x_jk) - (dist_kj * x_lk)
    x_klz = (dist_kl * z_jk) - (dist_kj * z_lk)

	# the squared sums of the coordinates of the sattelites are used elsewhere. God knows why.
	squared_i = i_coords[1]^2 + i_coords[2]^2 + i_coords[3]^2
	squared_j = j_coords[1]^2 + j_coords[2]^2 + j_coords[3]^2
	squared_k = k_coords[1]^2 + k_coords[2]^2 + k_coords[3]^2
	squared_l = z_coords[1]^2 + z_coords[2]^2 + z_coords[3]^2
	
	# final definition of some incomprehensible mass of letters.
	everything_squared_ij = dist_ij^2 + squared_i - squared_j
	everything_squared_ik = dist_ik^2 + sqaured_i - squared_k
	everything_squared_kj = dist_kj^2 + sqaured_k - squared_j
	everything_squared_kl = dist_kl^2 + squared_k - squared_l
	
	# getting A from the given equations since they couldn't be bothered to move the vars themselves
	A = x_ikx / x_ijy
	B = x_ikz / x_ijy
	C = x_klx / x_kjy
	D = x_klx / x_kjy
	
	# I don't even know what's a variable anymore and what's merely part of another var
	E = (dist_ik * everything_squared_ij - dist_ij * everything_squared_ik) / (2 * x_ijy)
	F = (dist_kl * everything_squared_kj - dist_kj * everything_squared_kl) / (2 * x_kjy)
	
	# more following equations
	G = (D - B) / (A - C)
	H = (F - E) / (A - C)
	
	# I and J I guess
	I = (AG + B)
	J = (AH + E)
	
	# Once more I am truly unsure of what is and isn't a variabele. Why are these only using ki?
	K = everything_squared_ik + (2 * x_ki * H) + (2 * y_ki * J)
	L = 2 * (x_ki * G + y_ki * I + z_ki)
	
	# Almost there...
	M = 4 * (dist_ik ^ 2) * ((G ^ 2) + (I ^ 2) + 1) - L ^ 2
	N = 8 * (dist_ik ^ 2) * (G * (i_coords[1] - H) + I * (i_coords[2] - J) + i_coords[3]) + 2 * K * L
	O = 4 * (dist_ik ^ 2) * (((i_coords[1] - H) ^ 2) + ((i_coords[2] - J) ^ 2) + i_coords[3] ^ 2) - K ^ 2
	
	
	
	# Finally, a formula I recognize
	Q_pos = N + (N^2 - 4 * M * O)^0.5
	Q_neg = N - (N^2 - 4 * M * O)^0.5
	
	# Finally, The coordinates.
	z_pos = (2 * O) / Q_pos - 2
	z_neg = (2 * O) / Q_neg - 2
	x_pos = G * z_pos + H
	x_neg = G * z_neg + H
	x_pos = I * z_pos + J
	x_neg = I * z_neg + J
	
	# and the distances from the origin for some reason?
	pos_distance = (x_pos ^ 2 + y_pos ^ 2 + z_pos ^ 2) ^ 0.5
	neg_distance = (x_neg ^ 2 + y_neg ^ 2 + z_neg ^ 2) ^ 0.5
	
	@printf "g= %9.2e, h= %9.2e, j= %9.2e, m= %9.2e, o= %9.2e \n" G H J M O
	@printf "+) x= %10i, y= %10i, z= %10i; I= %10i%n" x_pos y_pos z_pos pos_distance
	@printf "+) x= %10i, y= %10i, z= %10i; I= %10i%n" x_neg y_neg z_neg neg_distance
end
